/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdarg.h>
#include "app_lorawan.h"
#include "../../ei-keyword-spotting/edge-impulse-sdk/classifier/ei_run_classifier.h"
#include <stdio.h>
#include <stm32_lpm.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/** Audio buffers, pointers and selectors */
typedef struct {
    int16_t *buffers[2];
    uint8_t buf_select;
    volatile uint8_t buf_ready;
    uint32_t buf_count;
    uint32_t n_samples;
} inference_t;

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define I2S_BUF_LEN 6400  // 4x desired size to downsample and throw out 1 ch
#define I2S_BUF_SKIP 4    // (2x L/R ch) * (2x sample rate)


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CRC_HandleTypeDef hcrc;

SAI_HandleTypeDef hsai_BlockB2;
DMA_HandleTypeDef hdma_sai2_b;

UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_tx;
/* USER CODE BEGIN PV */

// Settings
static bool debug_nn = false; // Set this to true to see e.g. features generated from the raw signal

// Globals
uint32_t i2s_buf[I2S_BUF_LEN];
static inference_t inference;
static bool record_ready = false;
static float d_temp;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_CRC_Init(void);
static void MX_SAI2_Init(void);
/* USER CODE BEGIN PFP */

static int get_audio_signal_data(size_t offset, size_t length, float *out_ptr);
static void audio_buffer_inference_callback(uint32_t n_bytes, uint32_t offset);
bool ei_microphone_inference_record(void);
bool ei_microphone_inference_end(void);
static bool screen_features(ei_impulse_result_t result, float param, float source[4][1000], float array[1000],float gamma);
static bool pesudo(ei_impulse_result_t result, float param);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float test[500] = {0.44921875,0.6171875,0.6171875,0.5390625,0.53125,0.53125,0.58203125,0.61328125,0.61328125,0.64453125,0.6875,0.6640625,0.51953125,0.53125,0.6640625,0.65625,0.6640625,0.68359375,0.6328125,0.66796875,0.7265625,0.734375,0.75,0.80859375,0.78515625,0.61328125,0.65625,0.671875,0.671875,0.68359375,0.65234375,0.68359375,0.7265625,0.68359375,0.67578125,0.66015625,0.65625,0.65234375,0.515625,0.578125,0.578125,0.578125,0.578125,0.62109375,0.62109375,0.62109375,0.6875,0.65625,0.65625,0.58203125,0.62890625,0.59375,0.65234375,0.6484375,0.578125,0.5859375,0.609375,0.59765625,0.66796875,0.68359375,0.5703125,0.62109375,0.72265625,0.80078125,0.7421875,0.6953125,0.671875,0.66015625,0.63671875,0.6328125,0.66015625,0.66015625,0.65625,0.6953125,0.69140625,0.69140625,0.6484375,0.64453125,0.51171875,0.578125,0.578125,0.5703125,0.5703125,0.62890625,0.59765625,0.59765625,0.51953125,0.51171875,0.51171875,0.671875,0.625,0.49609375,0.66796875,0.55859375,0.59375,0.58984375,0.4375,0.62109375,0.640625,0.66015625,0.640625,0.703125,0.69921875,0.78125,0.71484375,0.68359375,0.6953125,0.69921875,0.68359375,0.671875,0.65234375,0.6484375,0.65625,0.6953125,0.6328125,0.64453125,0.6875,0.65234375,0.4921875,0.5703125,0.5703125,0.6171875,0.6171875,0.546875,0.60546875,0.60546875,0.4453125,0.57421875,0.57421875,0.48046875,0.62890625,0.63671875,0.48046875,0.46875,0.5703125,0.51953125,0.67578125,0.62109375,0.62109375,0.6875,0.66796875,0.70703125,0.75390625,0.7890625,0.73828125,0.65625,0.69921875,0.671875,0.68359375,0.62890625,0.66796875,0.6796875,0.6640625,0.64453125,0.69921875,0.7109375,0.6171875,0.6484375,0.50390625,0.61328125,0.61328125,0.59765625,0.59765625,0.59375,0.54296875,0.54296875,0.3203125,0.6875,0.6875,0.53125,0.62109375,0.65625,0.66015625,0.55078125,0.6171875,0.62890625,0.64453125,0.609375,0.66796875,0.63671875,0.609375,0.671875,0.6875,0.7421875,0.7109375,0.63671875,0.66796875,0.63671875,0.66015625,0.640625,0.63671875,0.6484375,0.6484375,0.6796875,0.65234375,0.6796875,0.671875,0.66015625,0.53515625,0.515625,0.515625,0.50390625,0.50390625,0.59765625,0.51953125,0.51953125,0.5859375,0.609375,0.609375,0.63671875,0.55859375,0.61328125,0.57421875,0.63671875,0.6328125,0.54296875,0.61328125,0.42578125,0.6796875,0.52734375,0.60546875,0.65625,0.71484375,0.765625,0.73046875,0.671875,0.6640625,0.62109375,0.6328125,0.6171875,0.625,0.7109375,0.640625,0.6484375,0.65234375,0.6875,0.66796875,0.6640625,0.56640625,0.609375,0.609375,0.5703125,0.5703125,0.51953125,0.5390625,0.5390625,0.5234375,0.52734375,0.52734375,0.6953125,0.60546875,0.65625,0.6953125,0.64453125,0.6171875,0.6015625,0.578125,0.53515625,0.62890625,0.66796875,0.671875,0.65625,0.6953125,0.7890625,0.77734375,0.6953125,0.69921875,0.68359375,0.6875,0.625,0.67578125,0.65625,0.65234375,0.67578125,0.66015625,0.734375,0.6796875,0.67578125,0.5234375,0.4765625,0.4765625,0.58984375,0.58984375,0.58984375,0.60546875,0.60546875,0.546875,0.625,0.625,0.6953125,0.59765625,0.5703125,0.6015625,0.62109375,0.56640625,0.5078125,0.65625,0.625,0.609375,0.65234375,0.66015625,0.69921875,0.67578125,0.78515625,0.78515625,0.71484375,0.66015625,0.65625,0.65625,0.6484375,0.6484375,0.6484375,0.62109375,0.68359375,0.65234375,0.6484375,0.66796875,0.6796875,0.55078125,0.57421875,0.57421875,0.5703125,0.5703125,0.57421875,0.58984375,0.58984375,0.65625,0.65234375,0.65234375,0.6328125,0.67578125,0.69140625,0.65234375,0.61328125,0.6796875,0.6484375,0.546875,0.50390625,0.671875,0.68359375,0.7109375,0.63671875,0.703125,0.7734375,0.765625,0.625,0.69921875,0.671875,0.625,0.640625,0.68359375,0.66796875,0.671875,0.6796875,0.6484375,0.625,0.66015625,0.6640625,0.4140625,0.6015625,0.6015625,0.50390625,0.50390625,0.64453125,0.56640625,0.56640625,0.62890625,0.42578125,0.42578125,0.6640625,0.4765625,0.5859375,0.63671875,0.58203125,0.578125,0.6484375,0.640625,0.5703125,0.65625,0.62890625,0.68359375,0.6953125,0.66796875,0.77734375,0.7890625,0.734375,0.6875,0.71484375,0.72265625,0.65625,0.70703125,0.65625,0.6875,0.6796875,0.69140625,0.68359375,0.6796875,0.671875,0.6640625,0.5625,0.64453125,0.6484375,0.6796875,0.62890625,0.66796875,0.6484375,0.6953125,0.71875,0.80859375,0.6796875,0.68359375,0.64453125,0.62109375,0.66796875,0.66015625,0.66796875,0.6328125,0.63671875,0.640625,0.7109375,0.6953125,0.7265625,0.6875,0.51953125,0.4921875,0.4921875,0.51171875,0.51171875,0.58203125,0.58203125,0.58203125,0.60546875,0.62890625,0.62890625,0.40625,0.6640625,0.66015625,0.6328125,0.62109375,0.625,0.67578125,0.65234375,0.5703125,0.66796875,0.671875,0.6640625,0.671875,0.79296875,0.8046875,0.69921875,0.6796875,0.71875,0.70703125,0.6640625,0.6484375,0.66015625,0.6796875,0.6640625,0.6953125,0.68359375,0.68359375,0.66015625,0.66015625,0.484375,0.44921875,0.60546875,0.58984375,0.58984375,0.56640625,0.56640625,0.515625,0.57421875,0.57421875,0.59375,0.578125,0.578125,0.48828125,0.6640625,0.5625,0.63671875,0.671875,0.546875,0.51953125,0.6875,0.60546875,0.63671875,0.66796875,0.7421875,0.8359375,0.8046875,0.73828125,0.6953125,0.66015625,0.640625,0.66796875,0.66015625,0.66015625,0.640625};

float source[4][1000]={{0.5899403,0.5855014,0.5855014,0.60081434,0.60081434,0.6008161,0.60188055,0.60188055,0.6009514,0.59660214,0.59660214,0.59445506,0.592102,0.5891671,0.5848782,0.58761394,0.58191574,0.5778044,0.5788602,0.5766132,0.60631514,0.6090432,0.6043793,0.60114276,0.6030898,0.61721593,0.59759766,0.5946697,0.60636944,0.61106956,0.60762876,0.59460074,0.6012858,0.5973089,0.59526956,0.60230374,0.5970081,0.5948972,0.6049068,0.6021512,0.5857263,0.5770881,0.5770881,0.59449214,0.59449214,0.5943068,0.59543246,0.59543246,0.5946085,0.5886121,0.5886121,0.58686405,0.5833224,0.57599175,0.5723406,0.57713723,0.5644411,0.56277925,0.5637127,0.56029177,0.5904221,0.5938095,0.5883793,0.5860789,0.58652186,0.6023572,0.5801195,0.57725877,0.5864098,0.58986014,0.58418006,0.5698867,0.5753608,0.5704504,0.5671544,0.5722484,0.5639687,0.5617708,0.57193637,0.5666605,0.5856841,0.5777949,0.5777949,0.59462917,0.59462917,0.5945723,0.5957557,0.5957557,0.59705204,0.58993685,0.58993685,0.58525574,0.58408266,0.5776518,0.5717373,0.577351,0.56569517,0.5637627,0.56193197,0.56118727,0.5921356,0.59450847,0.58773893,0.5862849,0.5869003,0.60209,0.5799945,0.5762374,0.58695287,0.58943695,0.5841921,0.56946176,0.5757297,0.5714856,0.5675328,0.5726897,0.5644669,0.56200093,0.5724216,0.56642175,0.58541256,0.5774053,0.5774053,0.59587723,0.59587723,0.59432834,0.59549624,0.59549624,0.59514976,0.58939385,0.58939385,0.58340174,0.5822795,0.57742167,0.5711753,0.5773208,0.56565636,0.56231296,0.5633335,0.56022537,0.5903402,0.59274584,0.5879794,0.5863495,0.58616763,0.60236496,0.5801919,0.5768959,0.58769065,0.5891628,0.58493423,0.5698945,0.575291,0.5709822,0.56691134,0.5721329,0.5648953,0.5619682,0.5718235,0.5666683,0.58640206,0.57663816,0.57663816,0.594468,0.594468,0.5939655,0.59526783,0.59526783,0.59499896,0.58822936,0.58822936,0.58334225,0.582451,0.5772165,0.572382,0.5764718,0.5647074,0.562831,0.5619501,0.5603926,0.5909065,0.59442145,0.58847415,0.58585906,0.586003,0.6009626,0.5811685,0.5779992,0.58763635,0.5901661,0.5852678,0.56995046,0.57596415,0.57099426,0.56809646,0.5731344,0.5641118,0.56224746,0.57234836,0.56707424,0.5867072,0.57712686,0.57712686,0.59445935,0.59445935,0.59261227,0.5955601,0.5955601,0.59506446,0.5890137,0.5890137,0.5852626,0.58301646,0.5765313,0.572688,0.57936704,0.5671251,0.56416696,0.56291544,0.55980045,0.59040743,0.5932828,0.5881294,0.58634865,0.5870132,0.60118496,0.5799626,0.5772165,0.58782595,0.5900351,0.58472997,0.57098997,0.57585466,0.5708986,0.5670596,0.5725466,0.56467897,0.56231815,0.5729069,0.5674923,0.58637017,0.5772657,0.5772657,0.5948377,0.5948377,0.5927321,0.59486794,0.59486794,0.5939362,0.58871293,0.58871293,0.5828044,0.583225,0.5756444,0.572513,0.5771398,0.56488323,0.5624207,0.56377566,0.5592712,0.5905755,0.594037,0.5875993,0.58516866,0.58727264,0.60109794,0.579698,0.57807326,0.58703476,0.58917147,0.584124,0.56872827,0.5753591,0.5713201,0.5671139,0.5717597,0.56322145,0.5615605,0.5723044,0.567394,0.5849041,0.5759004,0.5759004,0.5942327,0.5942327,0.59506446,0.5952489,0.5952489,0.595298,0.58821213,0.58821213,0.58391285,0.5827346,0.5760641,0.5717838,0.5779509,0.566539,0.5637222,0.5630723,0.5596625,0.5900799,0.59258294,0.58828884,0.5853807,0.5861883,0.60140216,0.5796213,0.5765494,0.5869313,0.58862156,0.58402747,0.56953764,0.57558316,0.5709546,0.56677514,0.5718071,0.5634136,0.56168205,0.57264143,0.5670432,0.5872864,0.5771476,0.5771476,0.5964616,0.5964616,0.5931682,0.59703654,0.59703654,0.5958574,0.58964723,0.58964723,0.5847144,0.58214414,0.57449716,0.57115203,0.576914,0.56481254,0.563118,0.5611287,0.5584938,0.590129,0.5919399,0.5876036,0.58567977,0.5860513,0.6010135,0.57949114,0.5770536,0.58760273,0.58940244,0.5843223,0.5702427,0.57463163,0.57024956,0.5675673,0.5718191,0.56343,0.56088305,0.57206994,0.56713027,0.58573323,0.57616323,0.57616323,0.5939422,0.5939422,0.59324574,0.59620476,0.59620476,0.5945809,0.58845776,0.58845776,0.5854531,0.5827294,0.57635117,0.5704383,0.57656664,0.56527543,0.56288356,0.5624388,0.55918247,0.590972,0.5940267,0.5876226,0.58547205,0.5867598,0.60158145,0.579648,0.57759404,0.5873726,0.59030575,0.58475065,0.57053745,0.57498413,0.57112443,0.56772244,0.5726785,0.5634938,0.56068736,0.571926,0.5666588,0.5862142,0.57592016,0.57592016,0.5927269,0.5927269,0.5932285,0.5969788,0.5969788,0.5968055,0.5892154,0.5892154,0.5860142,0.5834155,0.57841116,0.5729759,0.5762262,0.56571156,0.56255347,0.5611692,0.5593729,0.5904609,0.5950291,0.5886948,0.58636844,0.5874545,0.60212535,0.5795868,0.5768356,0.5866055,0.589836,0.58554703,0.57009876,0.5749729,0.57059,0.56725436,0.5724009,0.5639187,0.560927,0.57172436,0.56727594,0.58531433,0.57566077,0.57566077,0.59473175,0.59473175,0.59190977,0.5948041,0.5948041,0.5953428,0.5877476,0.5877476,0.5850928,0.58241826,0.57581246,0.57137007,0.5774286,0.5657986,0.562581,0.5616467,0.5594755,0.5902489,0.59301734,0.58811647,0.585753,0.5859263,0.6023012,0.58013844,0.57698125,0.5859047,0.5893895,0.5846067,0.5706383,0.5756211,0.5711184,0.568324,0.5734982,0.5649565,0.5621785,0.57278275,0.56735957,0.58657277,0.5778897,0.5778897,0.59437746,0.59437746,0.5934345,0.59410685,0.59410685,0.59484893,0.58967656,0.58967656,0.58435756,0.5822588,0.576939,0.5705125,0.5782319,0.5674699,0.5614407,0.5613209,0.55954707,0.5920313,0.59429216,0.587701,0.58663565,0.587389,0.6022891,0.5808168,0.57715964,0.58710194,0.59045225,0.58496094,0.57042974,0.575803,0.5710141,0.5683542,0.5735197,0.5650229,0.5625052,0.5729603,0.56761897,0.5865512,0.5780647,0.5780647,0.5942404,0.5942404,0.5938371,0.5943413,0.5943413,0.5940646,0.588494,0.588494,0.5867486,0.5825027,0.57758546,0.573243,0.57708895,0.56671655,0.5619199,0.5629404,0.55893767,0.5901075,0.59310615,0.5869132,0.58580476,0.5861926,0.60155904,0.5801652,0.57742083,0.5870528,0.58971447,0.5844317,0.5696402,0.5755909,0.57048917,0.56838524,0.5735361,0.5651634,0.56271976,0.57266295,0.56750435,0.5857298,0.57675797,0.57675797,0.59518856,0.59518856,0.59317076,0.59645385,0.59645385,0.5949817,0.5898239,0.5898239,0.58576596,0.5829906,0.5769502,0.57232165,0.57664937,0.5655236,0.5644143,0.56134415,0.5599461,0.5915754,0.5945559,0.58744675,0.58587116,0.5863271,0.6017263,0.5789576,0.5770916,0.5861607,0.5896188,0.5844093,0.57017374,0.5761805,0.57087535,0.5668881,0.57302326,0.5639558,0.562157,0.5722527,0.5672811,0.5856479,0.577376,0.577376,0.59460074,0.59460074,0.59338796,0.59696156,0.59696156,0.59517217,0.58887666,0.58887666,0.5867408,0.5833,0.5775389,0.571333,0.57672524,0.567881,0.5641187,0.56260604,0.56073135,0.592152,0.5936785,0.58788115,0.5855677,0.58616245,0.60107464,0.5805608,0.5775061,0.58721316,0.59069276,0.58541083,0.57141924,0.57643646,0.571508,0.56812495,0.5730569,0.5645919,0.56315506,0.5738895,0.56793356,0.5855402,0.57665455,0.57665455,0.5934018,0.5934018,0.5938207,0.59640557,0.59640557,0.5970417,0.58894306,0.58894306,0.5855841,0.58298457,0.57734495,0.57157266,0.57647353,0.56653124,0.56359464,0.56308955,0.559472,0.59162533,0.5951153,0.5870175,0.5850368,0.58717436,0.6020124,0.5806513,0.5773312,0.58707523,0.5905143,0.5854591,0.5712537,0.5759831,0.570915,0.5686542,0.57361454,0.5644402,0.56203455,0.574111,0.56796545,0.58659,0.5778862,0.5778862,0.5933785,0.5933785,0.5945757,0.59549886,0.59549886,0.5945473,0.58837074,0.58837074,0.5853333,0.5811538,0.576402,0.57247937,0.57661146,0.5665614,0.5634352,0.56414026,0.5600797,0.5920701,0.5946507,0.5879604,0.5866994,0.58805007,0.60256404,0.58098227,0.57777417,0.58785355,0.5899541,0.58457655,0.5696014,0.5753841,0.5713184,0.5677526,0.5728009,0.56399286,0.561957,0.57333875,0.5678,0.58670634,0.57719845,0.57719845,0.59370434,0.59370434,0.59433526,0.595148,0.595148,0.5955876,0.5904893,0.5904893,0.58565307,0.5827863,0.5767718,0.5719596,0.57753974,0.5657684,0.5625491,0.5629827,0.56008834,0.5911952,0.59388876,0.5874157,0.58614004,0.5875536,0.60203224,0.5803539,0.5764925,0.5870063,0.5895912,0.584992,0.56972295,0.5760167,0.57054263,0.5676871,0.5722863,0.5643359,0.5612373,0.5724328,0.56765085,0.586646,0.57645804,0.57645804,0.595067,0.595067,0.59223646,0.59628063,0.59628063,0.5949524,0.58963776,0.58963776,0.585997,0.58119,0.57715446,0.5752548,0.5759547,0.5669691,0.56149846,0.5615165,0.5596582,0.59102285,0.59360176,0.58718127,0.5852962,0.58596075,0.60071695,0.580753,0.5772467,0.58777165,0.58960843,0.5851549,0.5695454,0.5751358,0.5714261,0.5687903,0.5732353,0.5647505,0.5622724,0.57272506,0.56811976,0.5859642,0.576533,0.576533,0.59608924,0.59608924,0.59418875,0.59533334,0.59533334,0.5949041,0.5901135,0.5901135,0.584667,0.5814684,0.5766623,0.5733948,0.5765865,0.5652823,0.5623138,0.56267667,0.5596893,0.5913038,0.5943387,0.5856884,0.58528936,0.58697784,0.60125047,0.5797058,0.5770062,0.587807,0.5902368,0.5849644,0.5701401,0.5753341,0.5708081,0.56860846,0.573836,0.5650263,0.56144416,0.5723079,0.56795514,0.5859814,0.5775992,0.5775992,0.5958695,0.5958695,0.59435594,0.59671676,0.59671676,0.59397066,0.5894421,0.5894421,0.58500576,0.5824519,0.5778871,0.57125545,0.57734925,0.5648875,0.5643152,0.5632559,0.55992717,0.5905514,0.5938914,0.5873416,0.5854824,0.58624434,0.6026494,0.5796316,0.5768459,0.5869641,0.5896955,0.58462477,0.570128,0.5753858,0.57036763,0.56777585,0.5730362,0.56413853,0.56202334,0.5728319,0.56778276,0.58548415,0.5767916,0.5767916,0.5942827,0.5942827,0.593494,0.5956799,0.5956799,0.59694344,0.5883371,0.5883371,0.5852195,0.58322155,0.5754341,0.57222253,0.5783793,0.56556934,0.5626034,0.56319296,0.5604331,0.5924019,0.59515494,0.5875191,0.5859901,0.5869477,0.6021831,0.58120465,0.5769355,0.5876648,0.58993685,0.5845946,0.57046765,0.5760288,0.5711503,0.5663933,0.5716864,0.56399715,0.5618708,0.572563,0.567157,0.58549273,0.57649857,0.57649857,0.5947024,0.5947024,0.5932828,0.59502476,0.59502476,0.5960815,0.58909214,0.58909214,0.58472043,0.58144945,0.5768588,0.57094514,0.5773312,0.5659891,0.56196386,0.56297064,0.55959445,0.59066,0.5936517,0.58840865,0.58610296,0.5859392,0.601241,0.5799023,0.57825255,0.58745706,0.5891792,0.5839482,0.5695635,0.5747221,0.5703185,0.5666528,0.5717416,0.5640541,0.561239,0.57133734,0.5670958,0.5866555,0.5776639,0.5776639,0.59430856,0.59430856,0.5923425,0.5958126,0.5958126,0.5956221,0.5889267,0.5889267,0.5857306,0.5848834,0.57833964,0.5734387,0.57765526,0.5668803,0.56384116,0.5635266,0.56059426,0.59092546,0.59451365,0.58772427,0.5851816,0.58646846,0.60191935,0.5808151,0.5779802,0.5868822,0.59047467,0.5853729,0.5697135,0.57546854,0.5708469,0.56769395,0.57297325,0.5639239,0.56191045,0.572569,0.5678241},{0.5601711,0.5679362,0.5679362,0.57259285,0.57259285,0.57415944,0.5650197,0.5650197,0.57074267,0.56902623,0.56902623,0.5728365,0.57177454,0.5715923,0.5657011,0.5738241,0.56567633,0.5611652,0.5592169,0.558901,0.5892594,0.592729,0.59574896,0.59013593,0.58989763,0.60622025,0.58664155,0.5831493,0.5960185,0.60256195,0.59941906,0.5858847,0.59164107,0.5896065,0.58682805,0.5943861,0.5916141,0.589861,0.5976099,0.5956131,0.5563619,0.5647437,0.5647437,0.5702435,0.5702435,0.56951785,0.5607307,0.5607307,0.5628623,0.5648515,0.5648515,0.5637151,0.56625205,0.56350595,0.558335,0.56557065,0.5541646,0.55204165,0.54970306,0.54925454,0.5800905,0.5859084,0.58773375,0.5821725,0.58038056,0.5985436,0.57781446,0.57194376,0.5846038,0.5899063,0.5858685,0.57172275,0.57708454,0.5713864,0.5684645,0.5766716,0.5736225,0.57112545,0.57848835,0.57547915,0.55729777,0.56390595,0.56390595,0.570926,0.570926,0.56934863,0.55911237,0.55911237,0.5622057,0.56314474,0.56314474,0.5626887,0.5652181,0.56419057,0.55814415,0.56638145,0.5563867,0.5515845,0.55168045,0.5487748,0.58010346,0.58617145,0.58843887,0.5820043,0.58132184,0.598839,0.57730556,0.57177883,0.5855407,0.5906987,0.58558494,0.57136697,0.577187,0.5731007,0.56949526,0.57661337,0.57307804,0.57084084,0.5782727,0.57506835,0.5572935,0.5641658,0.5641658,0.5702845,0.5702845,0.5701238,0.56118244,0.56118244,0.56336683,0.56208384,0.56208384,0.5628159,0.5660418,0.5621043,0.55636406,0.56722456,0.554667,0.54962003,0.5490475,0.5490163,0.58034176,0.5862049,0.58768415,0.58130884,0.580952,0.59921855,0.57687324,0.57096267,0.5844302,0.5902319,0.5856432,0.5714349,0.5769476,0.57246023,0.5687362,0.5764182,0.57239556,0.5702133,0.57812285,0.5751374,0.55528265,0.56438684,0.56438684,0.5689917,0.5689917,0.57008934,0.5599048,0.5599048,0.56329465,0.5630348,0.5630348,0.5631771,0.5645011,0.56450003,0.5582584,0.5643437,0.55450207,0.55119526,0.5495036,0.5496103,0.58016926,0.585379,0.58904696,0.5812086,0.5796808,0.59686595,0.576994,0.57141334,0.5844345,0.58966154,0.5852712,0.5712775,0.5758188,0.57138526,0.5689044,0.5765088,0.57275456,0.5702004,0.5782447,0.5758026,0.5566347,0.5630272,0.5630272,0.5704257,0.5704257,0.570292,0.5606876,0.5606876,0.56530434,0.56249136,0.56249136,0.5646801,0.56703913,0.5628558,0.5577668,0.5672052,0.55597055,0.55081034,0.5510217,0.54940766,0.5795633,0.5853046,0.5881219,0.581517,0.58028245,0.5985005,0.5762716,0.570733,0.58470625,0.5911192,0.5860432,0.57082784,0.57658,0.57331955,0.5704225,0.577601,0.57303923,0.571299,0.5787956,0.57599777,0.55657107,0.56444395,0.56444395,0.57093245,0.57093245,0.5682381,0.56097764,0.56097764,0.5644774,0.5628935,0.5628935,0.5652278,0.56731516,0.56402236,0.5586164,0.56575394,0.5568999,0.5506077,0.54974514,0.54828095,0.5806609,0.58692616,0.5885532,0.581973,0.57949215,0.59785897,0.5767546,0.57071036,0.5844895,0.5903828,0.5855612,0.57105,0.5763201,0.57195026,0.56875455,0.5773584,0.57275456,0.5709001,0.5786986,0.5751374,0.5561377,0.5625604,0.5625604,0.56993085,0.56993085,0.5675427,0.5615426,0.5615426,0.5645216,0.5628957,0.5628957,0.5651157,0.5660461,0.56268543,0.55783904,0.5676289,0.5563166,0.5520794,0.55099475,0.5506594,0.5807407,0.585724,0.5886847,0.58213586,0.5803978,0.5984228,0.5767978,0.57222843,0.58421993,0.5910438,0.58641946,0.57188773,0.57664466,0.5727319,0.569023,0.57710826,0.5732753,0.57059824,0.5789617,0.5754522,0.5568471,0.56373453,0.56373453,0.56942624,0.56942624,0.57028985,0.56119865,0.56119865,0.5635113,0.5623717,0.5623717,0.56497765,0.5669518,0.5623469,0.55756515,0.5677917,0.5578897,0.55185294,0.5498842,0.54811275,0.5807202,0.58593965,0.5879386,0.581807,0.58170885,0.5991614,0.5772614,0.5714349,0.5847472,0.59011006,0.58622324,0.5714597,0.5762953,0.57181764,0.56929684,0.57628995,0.57229203,0.5698564,0.5781002,0.57566893,0.55572146,0.5619728,0.5619728,0.56947476,0.56947476,0.5690553,0.5616245,0.5616245,0.5626898,0.5621604,0.5621604,0.56363535,0.5649065,0.56306064,0.55723524,0.5666251,0.55598134,0.5497742,0.5502486,0.54791653,0.5797962,0.585241,0.5869801,0.58136386,0.58170134,0.5995118,0.5778091,0.5718543,0.5840194,0.5904281,0.5851655,0.57102627,0.576043,0.572043,0.56907797,0.5767072,0.571767,0.5697227,0.57801825,0.57478374,0.5564676,0.5624299,0.5624299,0.5687146,0.5687146,0.5697044,0.56162345,0.56162345,0.5639297,0.56244284,0.56244284,0.56306386,0.5655135,0.56347686,0.5588579,0.5667168,0.5567835,0.55168366,0.55086106,0.5489408,0.5802986,0.5844313,0.5869413,0.58308464,0.5830383,0.6000013,0.57810664,0.5736667,0.58609384,0.5907548,0.58614993,0.5717066,0.57672226,0.57188666,0.56921816,0.57683116,0.57268775,0.5701551,0.5782091,0.5753778,0.5555673,0.56468225,0.56468225,0.56931627,0.56931627,0.5695416,0.5606024,0.5606024,0.56484073,0.5621604,0.5621604,0.56395125,0.566941,0.5618833,0.55856466,0.565865,0.5562077,0.55128586,0.55094403,0.54871655,0.58041614,0.58579195,0.5878944,0.582014,0.5832658,0.5995711,0.57836545,0.5739751,0.5864809,0.59089607,0.58597845,0.57188666,0.57628995,0.57222843,0.56928605,0.5765336,0.5722446,0.5700807,0.57845813,0.5758716,0.55629617,0.5643081,0.5643081,0.5702812,0.5702812,0.5701335,0.5616288,0.5616288,0.5634229,0.56234795,0.56234795,0.5634661,0.5652461,0.56438035,0.558749,0.56808716,0.5564643,0.5520125,0.55077046,0.5501408,0.58041936,0.5857973,0.58829653,0.58174664,0.5817326,0.5989533,0.57734656,0.57412493,0.58569276,0.59074616,0.5856755,0.5713627,0.57717943,0.5726856,0.56976044,0.576222,0.572416,0.57019824,0.57856596,0.57557404,0.55719644,0.5650488,0.5650488,0.5699276,0.5699276,0.5702295,0.560541,0.560541,0.5629259,0.5632235,0.5632235,0.5634165,0.56417763,0.56320727,0.5587253,0.56596637,0.5553042,0.55257857,0.5505408,0.5508535,0.5805962,0.5846286,0.5881963,0.5817326,0.57970023,0.59993553,0.5784172,0.5735363,0.585572,0.5901715,0.5850318,0.57121384,0.5771137,0.5723697,0.5691222,0.5762705,0.5710338,0.5693982,0.57783926,0.5755686,0.55717057,0.5632051,0.5632051,0.5678995,0.5678995,0.569009,0.56195337,0.56195337,0.5634143,0.56302834,0.56302834,0.56262183,0.56689465,0.5625776,0.55692255,0.56528604,0.55444276,0.54995966,0.5505063,0.55065405,0.5792981,0.5846922,0.5873143,0.58211964,0.5808852,0.59908485,0.5760571,0.5720613,0.5848302,0.59028363,0.58501565,0.5706241,0.5755255,0.5713562,0.5683427,0.57525057,0.5709864,0.5698845,0.57778645,0.57545435,0.55392736,0.56264555,0.56264555,0.56919765,0.56919765,0.5704742,0.560128,0.560128,0.5634661,0.56283313,0.56283313,0.56481165,0.5652709,0.56319976,0.5592536,0.5643965,0.5538239,0.54994243,0.5490831,0.54876184,0.5785293,0.5835504,0.5872399,0.58230513,0.580387,0.59756136,0.57703495,0.57303166,0.58448195,0.5896766,0.58481187,0.5699319,0.57536596,0.571492,0.5692419,0.5760635,0.57239985,0.56934,0.57834494,0.57566136,0.5550336,0.56311566,0.56311566,0.57002354,0.57002354,0.57054216,0.5610391,0.5610391,0.5627318,0.56452376,0.56452376,0.56427467,0.56606233,0.5625981,0.5581172,0.56624347,0.55552953,0.5502896,0.54974514,0.54804593,0.57879025,0.58474934,0.58670086,0.58163446,0.58121294,0.5979711,0.57707375,0.57155675,0.5843504,0.58995914,0.5847784,0.5701896,0.57585865,0.57156104,0.568016,0.5756775,0.5713702,0.5694769,0.5787385,0.57576054,0.55674684,0.5638725,0.5638725,0.57100147,0.57100147,0.5692408,0.5614337,0.5614337,0.5626919,0.56379163,0.56379163,0.5641841,0.56608063,0.56385314,0.5574261,0.56559545,0.55574733,0.5518605,0.548723,0.549564,0.5810609,0.5860119,0.5876464,0.5815881,0.58166575,0.5982201,0.57717186,0.5709486,0.58456284,0.59000224,0.5851256,0.571229,0.5757433,0.5718683,0.56926453,0.5766544,0.57169366,0.56952006,0.57838595,0.5755826,0.55536246,0.56513184,0.56513184,0.5702349,0.5702349,0.5691966,0.55957705,0.55957705,0.56466717,0.5634661,0.5634661,0.5643329,0.56621754,0.563521,0.55843955,0.56652164,0.5551759,0.54961145,0.5496632,0.54893106,0.5802587,0.5851515,0.5884141,0.58236873,0.5803223,0.5992627,0.57763875,0.57181764,0.5849585,0.5903343,0.5854135,0.57128936,0.57664466,0.5728958,0.5692063,0.57688403,0.5730058,0.5700775,0.5789207,0.57528615,0.5564352,0.5633324,0.5633324,0.5714263,0.5714263,0.5702316,0.561218,0.561218,0.56347466,0.56295717,0.56295717,0.56279975,0.566169,0.56365687,0.5581884,0.56579924,0.55565137,0.5499974,0.5482389,0.5488481,0.57959133,0.5860615,0.588082,0.5818264,0.58003664,0.5987107,0.5778134,0.5716602,0.585365,0.5899925,0.58523345,0.5707869,0.5769315,0.57240635,0.56932163,0.57698965,0.572995,0.570126,0.57860047,0.5763374,0.5565689,0.5640946,0.5640946,0.5692268,0.5692268,0.5708009,0.56071347,0.56071347,0.56461644,0.5639674,0.5639674,0.56291723,0.5668224,0.5638068,0.5573183,0.565024,0.5546185,0.54991657,0.5497462,0.54885775,0.5808355,0.5860432,0.58760977,0.5815299,0.5818652,0.59883684,0.57773685,0.57216376,0.58471376,0.5895192,0.58534664,0.5709993,0.5765519,0.5723772,0.5692354,0.57677186,0.57320744,0.5698985,0.5788981,0.5765002,0.55533546,0.5636946,0.5636946,0.5707729,0.5707729,0.56904674,0.56131077,0.56131077,0.5642596,0.56414855,0.56414855,0.5654779,0.56584346,0.5629884,0.55834687,0.5667416,0.5559899,0.5509279,0.54976666,0.5500459,0.5806242,0.5857294,0.5889683,0.58301884,0.5809811,0.59953123,0.5781703,0.57213247,0.5853499,0.58965075,0.58556986,0.5709971,0.57645595,0.57226723,0.56987476,0.576429,0.5727783,0.569768,0.5784517,0.5755126,0.5548988,0.5631006,0.5631006,0.5702953,0.5702953,0.569864,0.56169677,0.56169677,0.56449574,0.5619566,0.5619566,0.56362456,0.565589,0.56407523,0.55988,0.5657227,0.5551813,0.5511662,0.549909,0.54841894,0.5810717,0.5855159,0.58800435,0.5835321,0.58052933,0.59833443,0.57747054,0.571313,0.58451104,0.5892389,0.5855655,0.56989306,0.57617134,0.5715341,0.56888497,0.5758576,0.5722759,0.56946933,0.5781239,0.57583815,0.55608267,0.5633076,0.5633076,0.5696807,0.5696807,0.56970763,0.5605571,0.5605571,0.5626725,0.5643469,0.5643469,0.56293344,0.5641367,0.5623275,0.55712956,0.5651157,0.55559856,0.5519899,0.5487435,0.5496729,0.5790684,0.5851364,0.58760977,0.5820302,0.58163124,0.59863955,0.57738966,0.57238585,0.5843472,0.589944,0.58509326,0.57139605,0.5759061,0.57174754,0.56845695,0.5762705,0.57206565,0.5692214,0.5785994,0.5760053,0.55539477,0.5638272,0.5638272,0.56928825,0.56928825,0.5705583,0.56026816,0.56026816,0.5642003,0.5619167,0.5619167,0.5632375,0.5667836,0.5626876,0.55804604,0.5647782,0.5560169,0.55058503,0.5509063,0.54786366,0.5804916,0.5843019,0.5863623,0.58221024,0.5808711,0.5990374,0.57759666,0.5733045,0.5856076,0.5905715,0.5860292,0.5716516,0.5762015,0.57226723,0.56901973,0.5765972,0.57278156,0.5699815,0.5787396,0.5755007},{0.4874393,0.5007143,0.5007143,0.51040703,0.51040703,0.51261,0.51207376,0.51207376,0.5184448,0.5219381,0.5219381,0.52064455,0.5176275,0.51337373,0.5107234,0.5076441,0.5068751,0.50900733,0.5119236,0.5138274,0.54471594,0.54813206,0.548782,0.54695225,0.5482661,0.5603549,0.5419112,0.53801244,0.55012697,0.5575716,0.55455667,0.54228234,0.54902655,0.54543346,0.54213536,0.5457617,0.5415551,0.5387847,0.5443931,0.5423724,0.4844329,0.49917197,0.49917197,0.5068118,0.5068118,0.50824904,0.5093849,0.5093849,0.51459855,0.51864105,0.51864105,0.51725423,0.51398826,0.51001126,0.50635165,0.5040918,0.50287443,0.5037057,0.5071861,0.5092562,0.54105103,0.5443427,0.54593223,0.54374313,0.5471753,0.5578526,0.5392019,0.53465754,0.5450205,0.5526979,0.5485986,0.5362149,0.5420775,0.53733784,0.53266793,0.5356775,0.53109556,0.5276687,0.5335667,0.53094757,0.48538107,0.50095886,0.50095886,0.5076141,0.5076141,0.5080871,0.5079122,0.5079122,0.5132139,0.51848763,0.51848763,0.5183879,0.5160079,0.5112833,0.5084989,0.50426984,0.50298387,0.50391805,0.50763446,0.50993294,0.54187155,0.54467195,0.54745525,0.5450838,0.54587966,0.55753297,0.53953874,0.53389275,0.54580134,0.5524169,0.5485943,0.5355842,0.54217505,0.53723055,0.5318957,0.5359403,0.53037477,0.5279036,0.53335434,0.53107196,0.4846249,0.500473,0.500473,0.5070038,0.5070038,0.5093205,0.5101807,0.5101807,0.5157376,0.51843834,0.51843834,0.5183171,0.516749,0.51057756,0.50754005,0.5051558,0.50392985,0.5050528,0.50882393,0.5104006,0.5413116,0.54511064,0.5467002,0.5440917,0.5460588,0.557726,0.5393928,0.5327773,0.5455622,0.55294997,0.5483669,0.534369,0.54211926,0.5376585,0.53235364,0.5357376,0.5310001,0.5278618,0.5337147,0.53099364,0.48482332,0.50124633,0.50124633,0.506401,0.506401,0.5092197,0.51015496,0.51015496,0.5157966,0.51875794,0.51875794,0.5167823,0.5156958,0.51074487,0.50787795,0.5047225,0.50376576,0.5043503,0.50776637,0.5102258,0.5418887,0.5455257,0.54630655,0.5446773,0.54574025,0.5586399,0.5401404,0.53400433,0.54620355,0.5526293,0.5485214,0.5352142,0.5428476,0.53764457,0.5323633,0.5368005,0.53124785,0.5282962,0.53410834,0.5321552,0.48403287,0.49908832,0.49908832,0.50741136,0.50741136,0.5063356,0.5108393,0.5108393,0.5143369,0.51851875,0.51851875,0.519897,0.51652914,0.5090556,0.50558156,0.5020754,0.5026449,0.5046581,0.5066112,0.5092122,0.54159695,0.54400915,0.5454195,0.54477066,0.54420435,0.55630064,0.5398755,0.5335946,0.5454442,0.5535774,0.54869086,0.5345513,0.54221475,0.537355,0.5319954,0.5360197,0.5308038,0.52887213,0.53411156,0.53154385,0.4846249,0.5005384,0.5005384,0.50699735,0.50699735,0.50833803,0.5089172,0.5089172,0.51500934,0.5187526,0.5187526,0.5180093,0.51486564,0.50785756,0.5053231,0.503814,0.5030482,0.5039996,0.5067603,0.5077417,0.5399988,0.54469985,0.5462776,0.5445143,0.5451246,0.557311,0.5396363,0.5339271,0.54592365,0.55228066,0.54822856,0.53519917,0.54276174,0.5379106,0.5325263,0.5363039,0.5310634,0.52885497,0.5346382,0.53148276,0.4839728,0.4992031,0.4992031,0.50730413,0.50730413,0.50774276,0.5078511,0.5078511,0.51520884,0.5181734,0.5181734,0.5189617,0.51439905,0.5099855,0.5063249,0.5032498,0.50426555,0.50383115,0.50657904,0.5072033,0.53964275,0.54468805,0.5459108,0.54339564,0.5445808,0.5565055,0.5387515,0.53257245,0.5447127,0.5519031,0.54879594,0.53556275,0.54217505,0.5378194,0.5333254,0.5361548,0.53134865,0.52845275,0.53389275,0.53194606,0.48451874,0.49747735,0.49747735,0.50589156,0.50589156,0.50766236,0.5087338,0.5087338,0.51378876,0.51885444,0.51885444,0.51717055,0.514531,0.5116072,0.5078769,0.50306106,0.5019392,0.501892,0.5073138,0.5088658,0.54039353,0.54380536,0.5453123,0.5425687,0.54466444,0.5568637,0.5378859,0.53245664,0.54453146,0.55041873,0.54744023,0.53484845,0.54166347,0.5365066,0.5315964,0.53476155,0.53003585,0.5267742,0.53330284,0.53108376,0.4830611,0.49902183,0.49902183,0.5074489,0.5074489,0.50731057,0.5097581,0.5097581,0.5142403,0.51809293,0.51809293,0.5171437,0.5161645,0.50898695,0.50814176,0.5019746,0.50291413,0.50294524,0.50648576,0.5072183,0.54046434,0.54443175,0.5453702,0.54283684,0.5438204,0.5557815,0.53837395,0.53340477,0.5437968,0.55060214,0.54705304,0.53445375,0.5414468,0.53702354,0.53193325,0.53574294,0.5303233,0.52771056,0.5335603,0.53104407,0.48374218,0.49802005,0.49802005,0.50692123,0.50692123,0.5059334,0.5092594,0.5092594,0.5145503,0.51706654,0.51706654,0.51732713,0.51524425,0.5094546,0.50595486,0.5036445,0.5042484,0.5026685,0.50727195,0.50784576,0.54049546,0.5441239,0.5452104,0.54269844,0.5444349,0.5568691,0.5394325,0.5321831,0.5442633,0.55135614,0.54707557,0.5346929,0.54150575,0.53610975,0.5322357,0.5351895,0.5296916,0.5273341,0.53357744,0.5307105,0.4838087,0.49957097,0.49957097,0.5063356,0.5063356,0.5088121,0.5088968,0.5088968,0.5155456,0.5178452,0.5178452,0.5165828,0.5139304,0.51086175,0.5068225,0.50286156,0.5028787,0.5041465,0.50672174,0.5072419,0.54033774,0.54459906,0.5454249,0.54338276,0.54278105,0.5552581,0.5370407,0.53224427,0.54370344,0.5519911,0.54787034,0.53384024,0.5417063,0.53618485,0.53133154,0.53419095,0.5294985,0.52703166,0.53265506,0.53025144,0.48389557,0.49904007,0.49904007,0.50741994,0.50741994,0.5079069,0.5102247,0.5102247,0.51424354,0.51863784,0.51863784,0.51707727,0.5141363,0.50915533,0.5049102,0.50334316,0.5016603,0.5033743,0.5071175,0.50650936,0.53996557,0.54341495,0.5444221,0.5428347,0.5437217,0.55650765,0.5375148,0.53380483,0.5450088,0.551561,0.54740053,0.53470254,0.5416656,0.53675973,0.53103334,0.53440654,0.52970874,0.5276902,0.53217775,0.5298782,0.48390415,0.49826676,0.49826676,0.507362,0.507362,0.50765914,0.5066992,0.5066992,0.5139486,0.51713943,0.51713943,0.5168842,0.51499754,0.50816,0.5065479,0.50446075,0.50433207,0.5018823,0.50674313,0.50705314,0.5398122,0.5434257,0.5435758,0.5429988,0.5438568,0.5561473,0.5386013,0.5333801,0.5460448,0.5519514,0.5479122,0.53403115,0.5417278,0.5366857,0.5317541,0.53597677,0.5298664,0.5273255,0.5337222,0.5308564,0.4828316,0.5007068,0.5007068,0.5058851,0.5058851,0.5074403,0.5091253,0.5091253,0.5150158,0.5178838,0.5178838,0.51871395,0.5154169,0.5083541,0.5063442,0.5037175,0.5038247,0.50312865,0.50769347,0.5079197,0.54105854,0.54511493,0.544569,0.54339564,0.54229516,0.5564926,0.53776795,0.5325028,0.5446709,0.5512789,0.54690075,0.5341341,0.54174066,0.5367855,0.5317316,0.5362706,0.5306354,0.527362,0.53320205,0.53013027,0.4847579,0.49979407,0.49979407,0.50629807,0.50629807,0.5084271,0.5104328,0.5104328,0.51395184,0.517724,0.517724,0.51799107,0.51501685,0.50822973,0.5068976,0.50374216,0.5035491,0.5029817,0.5068762,0.50787044,0.5406499,0.5441078,0.54427725,0.5433506,0.54315215,0.55652696,0.537754,0.53271085,0.5445572,0.5515492,0.54855675,0.53493744,0.5410671,0.5369968,0.53100437,0.53581375,0.5307759,0.5281364,0.53351414,0.53034264,0.48253557,0.49901217,0.49901217,0.5062401,0.5062401,0.50648147,0.5083992,0.5083992,0.5135196,0.51880515,0.51880515,0.51722527,0.513304,0.50730306,0.50556123,0.5030525,0.50158954,0.50239825,0.5074382,0.5067689,0.5399516,0.54375386,0.54433626,0.5421879,0.54364556,0.5566503,0.5374955,0.5325853,0.54481035,0.5516929,0.5481835,0.53537184,0.541953,0.5367168,0.5319364,0.53591025,0.5305228,0.52707237,0.53324604,0.5309497,0.48291203,0.50026494,0.50026494,0.5049445,0.5049445,0.50801736,0.5086427,0.5086427,0.51297045,0.51831067,0.51831067,0.5189156,0.5148592,0.50859547,0.5078093,0.50424194,0.5043739,0.50288624,0.50654155,0.50808173,0.5406327,0.54412496,0.54495513,0.54324335,0.54401666,0.55835456,0.53771216,0.53305084,0.5453037,0.55168754,0.54853743,0.53545976,0.5415873,0.5374526,0.53342944,0.5362953,0.5303823,0.5285268,0.53421456,0.53194714,0.4858208,0.49920845,0.49920845,0.50672925,0.50672925,0.5073577,0.51073307,0.51073307,0.514783,0.5172971,0.5172971,0.5196653,0.51520777,0.5102451,0.50681716,0.50499594,0.50225234,0.5057146,0.50661445,0.50823724,0.5418994,0.5453799,0.54582924,0.543933,0.54561794,0.5585294,0.5396846,0.53433466,0.5461521,0.55250806,0.5488614,0.5358802,0.54390186,0.5382366,0.5333608,0.5369206,0.5316361,0.528693,0.5343003,0.53180665,0.48457664,0.49966857,0.49966857,0.50578,0.50578,0.50695336,0.50927013,0.50927013,0.51339084,0.5176146,0.5176146,0.51732606,0.51440656,0.5103105,0.50782645,0.50328416,0.5009921,0.5030954,0.507805,0.50992435,0.5407078,0.54473525,0.54592043,0.5444307,0.5453917,0.5575866,0.5380886,0.5349814,0.5458711,0.55251986,0.54952526,0.53551877,0.5432326,0.5391151,0.53290606,0.5367608,0.5313508,0.5288142,0.53451484,0.5315492,0.48449513,0.49862498,0.49862498,0.50686115,0.50686115,0.50684077,0.5102665,0.5102665,0.51351637,0.5185198,0.5185198,0.51882875,0.51316994,0.51107734,0.5068998,0.5037829,0.50154126,0.5040028,0.50647825,0.5081471,0.5403989,0.54444456,0.54826504,0.54418826,0.5451793,0.55727667,0.5374987,0.53411585,0.5460856,0.5531645,0.5497773,0.5354662,0.543963,0.5382216,0.533452,0.53645617,0.5311738,0.52916175,0.5344033,0.53220564,0.48346117,0.50083125,0.50083125,0.50566417,0.50566417,0.5073985,0.50887007,0.50887007,0.5134745,0.5190861,0.5190861,0.51559496,0.5136204,0.5105969,0.5064954,0.50307286,0.50128704,0.50376254,0.50641817,0.50727624,0.54156476,0.545988,0.5450967,0.5432208,0.5448961,0.55731314,0.53821623,0.53249097,0.54511386,0.55238044,0.5488936,0.5353225,0.542751,0.5374526,0.53291243,0.5360186,0.5307641,0.52908343,0.5345749,0.53156316,0.48558486,0.5000107,0.5000107,0.50751436,0.50751436,0.506859,0.5085118,0.5085118,0.5146726,0.51856595,0.51856595,0.5149546,0.51246953,0.5092476,0.5065158,0.50433743,0.50162923,0.503282,0.50741243,0.50738776,0.5412988,0.5454989,0.5450817,0.5440349,0.54468805,0.55752224,0.5384919,0.53323853,0.5457059,0.55293816,0.54872626,0.5348538,0.54302025,0.5377958,0.53335863,0.5365774,0.5315825,0.52927756,0.53442156,0.532462,0.48529527,0.4999464,0.4999464,0.5071786,0.5071786,0.50774705,0.50812566,0.50812566,0.51439476,0.519927,0.519927,0.51620847,0.5151434,0.5088572,0.50405747,0.50317585,0.5033528,0.5022395,0.5082029,0.50739527,0.541686,0.5457349,0.54648244,0.5439587,0.5450581,0.5577786,0.536956,0.53364396,0.5455547,0.55177444,0.54814065,0.5361902,0.54235846,0.53769714,0.5323365,0.5356807,0.5305818,0.52792615,0.5334541,0.5305389,0.48617262,0.49972114,0.49972114,0.50815356,0.50815356,0.50813425,0.5089129,0.5089129,0.51421887,0.51802003,0.51802003,0.5190464,0.51588243,0.5094771,0.50595057,0.50267816,0.504183,0.50165176,0.50745535,0.5080678,0.5405587,0.54456687,0.5459172,0.5439083,0.5443556,0.55719084,0.5384007,0.5343969,0.54593116,0.55248445,0.54906946,0.53573114,0.5417439,0.53661174,0.532773,0.53584266,0.5293913,0.5266359,0.5331098,0.5309829},
    		{0.55341357,0.5557535,0.5557535,0.5615012,0.5615012,0.55892324,0.5551153,0.5551153,0.5543011,0.55817026,0.55817026,0.55815816,0.55989957,0.5640732,0.5703125,0.57865024,0.5888562,0.595205,0.6040758,0.6078699,0.63963056,0.64264494,0.64218783,0.641547,0.6390855,0.650824,0.63027674,0.6252001,0.63600636,0.6427761,0.63776755,0.6224867,0.62774104,0.6225022,0.61670536,0.618922,0.6151149,0.61158043,0.61492,0.6116839,0.5465455,0.5468638,0.5468638,0.55161613,0.55161613,0.5495462,0.5422227,0.5422227,0.5415663,0.5473166,0.5473166,0.547778,0.54986185,0.5535835,0.560179,0.5700132,0.58150774,0.59198964,0.6006017,0.6030175,0.63565874,0.6393701,0.6388181,0.6384058,0.636165,0.64661765,0.62635756,0.61985606,0.6313902,0.6364936,0.6313238,0.61576784,0.6193179,0.6131717,0.60682374,0.6080856,0.6019696,0.5976933,0.6008828,0.5968835,0.5481084,0.54668695,0.54668695,0.5526839,0.5526839,0.5506786,0.5414447,0.5414447,0.54183286,0.54595643,0.54595643,0.5464386,0.5503043,0.5523061,0.5611286,0.5704867,0.5807073,0.59116167,0.59981424,0.6035523,0.6357847,0.63903713,0.63810307,0.63700855,0.6366894,0.6483573,0.6268621,0.62054867,0.63174474,0.6369818,0.6310849,0.61508644,0.61971545,0.61359435,0.60614234,0.6079812,0.60264146,0.5980263,0.6006715,0.5970516,0.5459771,0.5469854,0.5469854,0.5528297,0.5528297,0.5510305,0.54261255,0.54261255,0.5428152,0.54503185,0.54503185,0.5470311,0.5486423,0.55272704,0.56007123,0.57054454,0.58038646,0.5926736,0.5991639,0.60322624,0.6361521,0.6395158,0.63893884,0.6379694,0.6363884,0.647707,0.6257409,0.62137145,0.6318034,0.63695854,0.6313359,0.6156919,0.61981297,0.6139695,0.60663396,0.6080304,0.60251296,0.59848166,0.60087854,0.5969697,0.5457874,0.5455502,0.5455502,0.5523458,0.5523458,0.55119264,0.5421131,0.5421131,0.5432327,0.5459495,0.5459495,0.5474606,0.54836714,0.55344635,0.55963564,0.5703582,0.58186305,0.5909417,0.60004365,0.60259837,0.63523614,0.6400497,0.6396642,0.6379228,0.635218,0.6469747,0.62579006,0.62021315,0.6309236,0.6362668,0.6308848,0.61514425,0.6204167,0.61358315,0.60626054,0.6082149,0.60302097,0.5993321,0.6015125,0.59719306,0.54677063,0.54574084,0.54574084,0.5528133,0.5528133,0.5510443,0.54204935,0.54204935,0.5438209,0.54594266,0.54594266,0.546988,0.54982215,0.5516325,0.5614538,0.569776,0.580295,0.5903854,0.600355,0.6045502,0.6352999,0.63931227,0.6390734,0.63742775,0.63595545,0.6474956,0.6260626,0.6199415,0.63139194,0.6368645,0.63106334,0.61632586,0.6206064,0.61364955,0.6060018,0.6081977,0.60269153,0.5983678,0.6012882,0.5967722,0.5458495,0.5457572,0.5457572,0.55346537,0.55346537,0.5502215,0.5437614,0.5437614,0.5414654,0.5470251,0.5470251,0.5463411,0.54820496,0.551492,0.55843073,0.5699114,0.5838149,0.59224147,0.5986844,0.6044622,0.6352844,0.63964176,0.63848686,0.6372354,0.63672477,0.64772767,0.6268768,0.6193912,0.63124704,0.6368533,0.63148946,0.61608607,0.61956626,0.61407214,0.6060104,0.6075025,0.6023827,0.59911734,0.60123646,0.59607184,0.54580724,0.54497665,0.54497665,0.55235964,0.55235964,0.5507088,0.5427333,0.5427333,0.54189926,0.54607373,0.54607373,0.54851806,0.5497143,0.5530039,0.5606258,0.5702849,0.58136797,0.5900766,0.59969866,0.60246986,0.63601756,0.6386447,0.6387836,0.63835406,0.63710517,0.64711446,0.6265896,0.6209661,0.631875,0.63707066,0.6318698,0.6158498,0.61969566,0.6133063,0.60595953,0.6080347,0.6024707,0.5980711,0.6008708,0.59624696,0.5470544,0.5459728,0.5459728,0.5518318,0.5518318,0.5505915,0.543218,0.543218,0.54252714,0.5472959,0.5472959,0.5474658,0.5499774,0.55269253,0.5605145,0.57105684,0.5817242,0.5921061,0.6003731,0.60444236,0.6353043,0.63965726,0.63871026,0.63808066,0.6364255,0.64774925,0.62605137,0.6205202,0.6320768,0.637351,0.63162655,0.6160162,0.6201614,0.6138824,0.60624415,0.6082313,0.6026268,0.598875,0.60113037,0.5962426,0.5476892,0.5442556,0.5442556,0.55145055,0.55145055,0.5509779,0.5424754,0.5424754,0.5430222,0.54518795,0.54518795,0.5471415,0.5499541,0.55281246,0.5595667,0.570021,0.5819045,0.5913022,0.5996943,0.60206795,0.63556904,0.6404223,0.639264,0.6383886,0.6348359,0.64704025,0.6263265,0.6200812,0.6327297,0.6369637,0.6319552,0.6160628,0.6200648,0.6138229,0.60616046,0.6082494,0.602375,0.5985619,0.6011261,0.59654015,0.5464127,0.5456477,0.5456477,0.5531643,0.5531643,0.5496919,0.5430731,0.5430731,0.54371136,0.54538375,0.54538375,0.5480135,0.5512082,0.55331355,0.5619023,0.5696604,0.58188206,0.59259427,0.5991863,0.6047857,0.6353776,0.6399721,0.6394322,0.6385524,0.6365954,0.64754134,0.62649125,0.6203175,0.6316585,0.63713187,0.631379,0.616043,0.6203951,0.613107,0.6063407,0.60802865,0.60278463,0.5983609,0.6012606,0.596397,0.5466024,0.5464222,0.5464222,0.55276066,0.55276066,0.55167824,0.5434276,0.5434276,0.5432758,0.5464455,0.5464455,0.5479842,0.54994464,0.5524114,0.5608621,0.57047033,0.5825013,0.59212935,0.5999729,0.6035997,0.63507396,0.6394882,0.6390975,0.6377641,0.63646084,0.6476078,0.62597376,0.61950415,0.63065624,0.63671356,0.6316093,0.6158515,0.619681,0.61344683,0.6057232,0.6082305,0.60258627,0.59781325,0.60117435,0.5962987,0.54604614,0.5465809,0.5465809,0.5511297,0.5511297,0.54924685,0.54107904,0.54107904,0.5428808,0.5476495,0.5476495,0.5473045,0.5499757,0.5522104,0.56074136,0.570096,0.58120495,0.5929427,0.59831,0.60463387,0.6358795,0.6403016,0.6385602,0.63837993,0.63654536,0.6477518,0.6261161,0.620258,0.63157135,0.6365721,0.6319181,0.61525553,0.6191945,0.6128983,0.6059793,0.6083426,0.6025216,0.59827554,0.6014004,0.59686965,0.5459556,0.5450284,0.5450284,0.5520396,0.5520396,0.54922533,0.54054254,0.54054254,0.5427773,0.5454217,0.5454217,0.54702854,0.5493771,0.5528073,0.5598832,0.57060313,0.5799164,0.5908011,0.600907,0.6040258,0.63488597,0.63916564,0.63911134,0.63815737,0.6362849,0.648497,0.6265991,0.62027436,0.6317818,0.636573,0.63149375,0.616112,0.61963785,0.6127474,0.6055231,0.60794324,0.60236806,0.5984722,0.6009544,0.5958985,0.54574084,0.54569167,0.54569167,0.55228114,0.55228114,0.5492624,0.5403718,0.5403718,0.54177505,0.5452768,0.5452768,0.5473822,0.54874575,0.5521224,0.5608095,0.57087314,0.5821339,0.58939093,0.5996624,0.60353243,0.6353439,0.6403067,0.63995314,0.6383773,0.63644016,0.64783376,0.626518,0.6201769,0.6313083,0.63666785,0.63161796,0.6150373,0.6201045,0.6128776,0.60545325,0.60875225,0.6025544,0.59824705,0.60106915,0.5965324,0.5454019,0.5466076,0.5466076,0.5514531,0.5514531,0.55006623,0.5416905,0.5416905,0.54285145,0.5458271,0.5458271,0.54778147,0.55006105,0.5537845,0.5614736,0.5710551,0.58155257,0.5922096,0.60011435,0.6033289,0.6357062,0.6393235,0.63972974,0.638737,0.6363703,0.64825034,0.6265223,0.62068146,0.6312807,0.63645226,0.6308063,0.61568415,0.6199423,0.6128595,0.6062062,0.6093854,0.60342896,0.59878784,0.60154265,0.59650135,0.547678,0.54549587,0.54549587,0.55167913,0.55167913,0.5506674,0.5426384,0.5426384,0.5432335,0.54797125,0.54797125,0.5479497,0.550858,0.5526149,0.5616134,0.5720306,0.5810583,0.5925865,0.6000117,0.6026389,0.6348549,0.6400506,0.64044213,0.6387948,0.636755,0.64794934,0.62747794,0.62054175,0.6320699,0.63735783,0.63163173,0.61556774,0.619518,0.6128819,0.6055498,0.6085712,0.60322887,0.59958047,0.6018799,0.5978443,0.54730105,0.5452794,0.5452794,0.5523234,0.5523234,0.55027497,0.5421787,0.5421787,0.5435699,0.54542774,0.54542774,0.54765385,0.5491831,0.55244327,0.56201786,0.569939,0.58186305,0.59252524,0.59978664,0.60511947,0.63549316,0.64064395,0.6388336,0.6377305,0.6372526,0.647989,0.6269475,0.6211481,0.6315921,0.63789517,0.63214064,0.615522,0.6202623,0.6137806,0.60608286,0.608616,0.6029727,0.5987499,0.60081816,0.59647375,0.5464774,0.5456977,0.5456977,0.5516593,0.5516593,0.54772544,0.5426255,0.5426255,0.5439253,0.54649895,0.54649895,0.5480903,0.55061305,0.55262357,0.56108725,0.5720349,0.5814422,0.59353435,0.60004795,0.60509014,0.63544226,0.64074576,0.6390466,0.6385679,0.6372052,0.64834696,0.6264283,0.6204227,0.63153684,0.63666093,0.6308736,0.61475265,0.61982846,0.6131993,0.60692036,0.6090015,0.60277516,0.5984523,0.6012132,0.5969231,0.54643166,0.54474634,0.54474634,0.5513876,0.5513876,0.5499576,0.5424366,0.5424366,0.54226065,0.5456908,0.5456908,0.5460116,0.54940295,0.55338687,0.56185746,0.5716856,0.58197516,0.59205866,0.59963566,0.6034859,0.63592094,0.6399574,0.63957363,0.63863003,0.6364764,0.6477906,0.6262886,0.62093675,0.6310159,0.63633233,0.63109875,0.61581266,0.6195421,0.613841,0.60650116,0.6084254,0.6029304,0.59879905,0.60114765,0.59677047,0.5446722,0.54711735,0.54711735,0.5524114,0.5524114,0.55013436,0.5421623,0.5421623,0.5429196,0.5460013,0.5460013,0.54653347,0.5504656,0.55338424,0.56113636,0.5718909,0.5820123,0.59206986,0.59865934,0.6044329,0.6365868,0.6401342,0.6389509,0.6383506,0.63742256,0.64786047,0.6273926,0.62117916,0.631737,0.63791674,0.6320992,0.61640006,0.6199958,0.613653,0.60645115,0.607669,0.6029399,0.5989819,0.6013279,0.5965609,0.5458978,0.5471053,0.5471053,0.55278826,0.55278826,0.54984283,0.5421408,0.5421408,0.54301965,0.54674995,0.54674995,0.5468922,0.5490838,0.55337393,0.56060857,0.5688057,0.58272123,0.5910176,0.6024259,0.60392314,0.6360434,0.64016443,0.6410493,0.63852656,0.6375804,0.6485505,0.6267897,0.6210403,0.6320147,0.6375545,0.6316395,0.6160119,0.6192739,0.61341065,0.6058905,0.60795015,0.60290456,0.5982341,0.60091907,0.5970525,0.5460116,0.5460436,0.5460436,0.5518482,0.5518482,0.5509529,0.5424029,0.5424029,0.5425979,0.54668266,0.54668266,0.5479229,0.54911834,0.5527477,0.56025577,0.56985104,0.5822805,0.59321785,0.6009812,0.605486,0.63530946,0.64080524,0.63955116,0.63771147,0.63618314,0.64817184,0.6261825,0.62078065,0.6321484,0.638279,0.63144976,0.61572987,0.61984485,0.614042,0.60692376,0.6085608,0.6025716,0.5984506,0.60079485,0.5965272,0.54609185,0.5459116,0.5459116,0.55190766,0.55190766,0.5503603,0.54199326,0.54199326,0.5431956,0.5465576,0.5465576,0.5472407,0.54968154,0.55194134,0.5591872,0.570623,0.5799673,0.59345245,0.6006258,0.60313743,0.6355975,0.63981855,0.63939506,0.63738716,0.6365204,0.6486419,0.62753487,0.62007517,0.6312462,0.6373898,0.6313575,0.6158938,0.62079966,0.61423,0.6064132,0.60854787,0.6028347,0.598467,0.60129946,0.59703696,0.5476676,0.54789275,0.54789275,0.5536344,0.5536344,0.55074763,0.541694,0.541694,0.5431775,0.5472105,0.5472105,0.5487483,0.5495858,0.55239844,0.5602135,0.569582,0.5820563,0.59220356,0.59891117,0.6038593,0.6361961,0.63946235,0.63983065,0.63801163,0.636648,0.64841163,0.62806016,0.6208324,0.6321829,0.6377348,0.6321225,0.61624825,0.6199639,0.61425155,0.6065753,0.60849094,0.60300285,0.5989819,0.601779,0.59685415}};

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  HAL_StatusTypeDef hal_res;
  int print_results = -(EI_CLASSIFIER_SLICES_PER_MODEL_WINDOW);
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  //MX_LoRaWAN_Process();

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  MX_CRC_Init();
  MX_SAI2_Init();

  /* USER CODE BEGIN 2 */
  // Say some stuff
//  ei_printf("Inferencing settings:\r\n");
//  ei_printf("\tInterval: %.2f ms.\r\n", (float)EI_CLASSIFIER_INTERVAL_MS);
//  ei_printf("\tFrame size: %d\r\n", EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE);
//  ei_printf("\tSample length: %d ms.\r\n", EI_CLASSIFIER_RAW_SAMPLE_COUNT / 16);
//  ei_printf("\tNo. of classes: %d\r\n", sizeof(ei_classifier_inferencing_categories) / sizeof(ei_classifier_inferencing_categories[0]));
  MX_LoRaWAN_Init();
  // Create double buffer
  inference.buffers[0] = (int16_t *)malloc(EI_CLASSIFIER_SLICE_SIZE * sizeof(int16_t));
  if(inference.buffers[0] == NULL)
  {
    ei_printf("ERROR: Could not create buffer 1. Likely ran out of heap memory.\r\n");
  }
  inference.buffers[1] = (int16_t *)malloc(EI_CLASSIFIER_SLICE_SIZE * sizeof(int16_t));
  if(inference.buffers[1] == NULL)
  {
    ei_printf("ERROR: Could not create buffer 2. Likely ran out of heap memory.\r\n");
  }
//  print_chirpbox_fut_config ((chirpbox_fut_config*)&fut_config);
  // Set inference parameters
  inference.buf_select = 0;
  inference.buf_count  = 0;
  inference.n_samples  = EI_CLASSIFIER_SLICE_SIZE;
  inference.buf_ready  = 0;
  //HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t *)i2s_buf, I2S_BUF_LEN);

  // Start receiving I2S audio data
  hal_res =  HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t *)i2s_buf, I2S_BUF_LEN);
  if (hal_res != HAL_OK)
  {
    ei_printf("ERROR: Could not initialize I2S microphone.\r\n");
  }

  // Start doing inference
  record_ready = true;
//  api_obtain_rtc_time();
//  UTIL_PowerDriver.EnterSleepMode( );
//  UTIL_PowerDriver.ExitSleepMode( );
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  /*lorawan test*/
	MX_LoRaWAN_Process();
    // Wait until buffer is full
//	HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t *)i2s_buf, I2S_BUF_LEN);
	bool m = ei_microphone_inference_record();

    /* usart_tx test*/
//    HAL_SAI_DMAStop(&hsai_BlockB2);
//    ei_microphone_inference_end();
//    HAL_UART_Transmit_DMA(&huart2, (uint8_t *)data,sizeof(data));
//    HAL_Delay(1000);
    if (!m)
    {
      ei_printf("ERROR: Audio buffer overrun\r\n");
      break;
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
//    // Do classification (i.e. the inference part)
    signal_t signal;
    signal.total_length = EI_CLASSIFIER_SLICE_SIZE;
    signal.get_data = &get_audio_signal_data;
    ei_impulse_result_t result = { 0 };
    EI_IMPULSE_ERROR r = run_classifier_continuous(&signal, &result, debug_nn);

    if (r != EI_IMPULSE_OK)
    {
        ei_printf("ERROR: Failed to run classifier (%d)\r\n", r);
        break;
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
    // Print output predictions (once every 4 predictions)
    if(++print_results >= (EI_CLASSIFIER_SLICES_PER_MODEL_WINDOW >> 1))
    {
       //Comment this section out if you don't want to see the raw scores
      ei_printf("Predictions (DSP: %d ms, NN: %d ms)\r\n", result.timing.dsp, result.timing.classification);
      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++)
      {
          ei_printf("    %s: %.5f\r\n", result.classification[ix].label, result.classification[ix].value);
      }
//    	if(screen_features(result,0.6,source,test,0.1)){
////    	//    	  ei_printf("d_temp:%f\n",d_temp);
////    	    	  ei_printf("waiting for update\n");
//    	}
      print_results = 0;
    }


    // ***END OF EXAMPLES***

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }

  ei_microphone_inference_end();
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_SAI2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI2;
  PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSI;
  PeriphClkInit.PLLSAI2.PLLSAI2M = 1;
  PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
  PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV7;
  //PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_SAI2CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }
}
/**
 * author:jxr
 * 筛选算法
 * @param
 */
static bool screen_features(ei_impulse_result_t result, float param, float source[4][1000], float array[1000],float gamma){
	//distance:当前target与平均target的距离
	//更新average_target_vector，即代表target的均值向量
//	ei_printf("array[0]:%f\n", array[0]);
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	//第一轮筛选
	if(!pesudo(result, param)){
		return false;
	}
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	//第二轮筛选，temp：target距离源域的平均一范数距离
	float temp = 0;
	for(int i=0;i<4;i++){
		for(int j=0;j<1000;j++){
//			ei_printf("array:%f\n",array[j]);
			if((array[j]-source[i][j])>=0){
				temp += (array[j]-source[i][j]);
			}
			else{
				temp -= (array[j]-source[i][j]);
			}
		}
	}
	temp/=4.0;
//	ei_printf("d_temp:%f\n",temp);
//	ei_printf("array:%f\n",array[1000]);
	if((temp>=(1-gamma)*d_temp)&&(temp<=(1+gamma)*d_temp)){
		d_temp = (temp+d_temp)/2;
		return true;
	}
	//更新d_temp
	d_temp = (temp+d_temp)/2;
	return false;
}
/**
 * author:jxr
 * 判断是否超过置信度阈值
 * @param:
 * result:最后一层结果
 * param:阈值
 */
static bool pesudo(ei_impulse_result_t result, float param){
    float max = result.classification[0].value;
	for(int ix=1;ix<4;ix++){
		if (result.classification[ix].value > max) {
			max = result.classification[ix].value;
		}
	}
	if(max>=param) return true;
	return false;
}
/**
 * @brief      Copy sample data in selected buf and signal ready when buffer is full
 *
 * @param[in]  n_bytes  Number of bytes to copy
 * @param[in]  offset   offset in sampleBuffer
 */
/**
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{

  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}

/**
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{

  /* USER CODE BEGIN SAI1_Init 0 */

  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB2.Instance = SAI2_Block_B;
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_32K;
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
  /* DMA interrupt init */
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin PA13*/
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);


}

/* USER CODE BEGIN 4 */
//void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
//{
//	HAL_UART_DMAPause(&huart2);
//
//}
/**t
 * @brief      Wait for a full buffer
 *
 * @return     In case of an buffer overrun return false
 */
bool ei_microphone_inference_record(void)
{
  bool ret = true;

  // Check to see if the buffer has overrun
//  if (inference.buf_ready == 1) {
//      ret = false;
//  }

  // %%%TODO: make this non-blocking
  while (inference.buf_ready == 0)
  {
    continue;
  }

  inference.buf_ready = 0;

  return ret;
}

/**
 * @brief      Stop audio sampling, release sampling buffers
 *
 * @return     false on error
 */
bool ei_microphone_inference_end(void)
{
  // Stop I2S
  HAL_SAI_DMAStop(&hsai_BlockB2);

  // Free up double buffer
  record_ready = false;
  free(inference.buffers[0]);
  free(inference.buffers[1]);

  return true;
}

/**
 * @brief      Copy sample data in selected buf and signal ready when buffer is full
 *
 * @param[in]  n_bytes  Number of bytes to copy
 * @param[in]  offset   offset in sampleBuffer
 */
static void audio_buffer_inference_callback(uint32_t n_bytes, uint32_t offset)
{
  // Copy samples from I2S buffer to inference buffer. Convert 24-bit, 32kHz
  // samples to 16-bit, 16kHz
  for (uint32_t i = 0; i < (n_bytes >> 1); i++) {
    inference.buffers[inference.buf_select][inference.buf_count++] =
        (int16_t)(i2s_buf[offset + (I2S_BUF_SKIP * i)] >> 8);

    if (inference.buf_count >= inference.n_samples) {
      inference.buf_select ^= 1;
      inference.buf_count = 0;
      inference.buf_ready = 1;
    }
  }
}

/**
 * Get raw audio signal data
 */
static int get_audio_signal_data(size_t offset, size_t length, float *out_ptr)
{
  numpy::int16_to_float(&inference.buffers[inference.buf_select ^ 1][offset], out_ptr, length);

  return 0;
}

/**
 * Low-level print function that uses UART to print status messages.
 */
void vprint(const char *fmt, va_list argp)
{
  char string[200];
  if(0 < vsprintf(string, fmt, argp)) // build string
  {
      HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 0xffffff);
  }
}

/**
 * Wrapper for vprint. Use this like you would printf to print messages to the serial console.
 */
void ei_printf(const char *format, ...)
{
  va_list myargs;
  va_start(myargs, format);
  vprint(format, myargs);
  va_end(myargs);
}

/**
 * Called when the first half of the receive buffer is full
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
  if (record_ready == true)
  {
    audio_buffer_inference_callback(I2S_BUF_LEN / I2S_BUF_SKIP, 0);
  }
}

/**
 * Called when the second half of the receive buffer is full
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
  if (record_ready == true)
  {
    audio_buffer_inference_callback(I2S_BUF_LEN / I2S_BUF_SKIP, I2S_BUF_LEN >> 1);
  }
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
